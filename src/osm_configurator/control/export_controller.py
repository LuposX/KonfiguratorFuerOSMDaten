from __future__ import annotations

import src.osm_configurator.model.application.application_interface
import pathlib


class ExportController:
    """
    The ExportController forwards requests to the model,
    regarding the export of information as files in the currently selected project.
    """

    def __init__(self, model):
        """
        Creates a new instance of the ExportController with an association to the model.

        Args:
            model (application_interface.IApplication): The interface which is used to communicate with the model.
        """
        pass

    def export_project(self, path):
        """
        Exports the currently selected project.
        Before it will be exported, the project will be saved.
        The folders and files of the project are copied to the given destination.

        Args:
            path (pathlib.Path): The place in storage where the project should be exported to.

        Returns:
            bool: True, if the export was successful; False, if an error occurred: The path was not valid or occupied, there was not enought space in storage or there was no project selected.
        """
        pass

    def export_calculations(self, path):
        """
        Exports the result of the calculations of the currently selected project.
        The folders and files regarding the results of the calculations are copied to the given destination.

        Args:
            path (pathlib.Path): The place in storage where the results should be exported to.

        Returns:
            bool: True, if the export was successful; False, if an error occurred: The path was not valid or occupied, there was not enought space in storage, the calculations have not produced results yet or there was no project selected.
        """
        pass

    def export_configurations(self, path):
        """
        Exports the category file of the currently selected project.
        A list of categories in the current project is stored at the given destination.

        Args:
            path (pathlib.Path): The place in storage where the categories should be stored at.

        Returns:
            bool: True, if the export was successful; False, if an error occurred: The path was not valid or occupied, there was not enought space in storage or there was no project selected.
        """
        pass

    def export_cut_out_map(self, path):
        """
        Exports the map generated by the cut-out configuration.

        Args:
            path (pathlib.Path): The place in storage where the cut-out-map should be stored at.

        Returns:
            bool: True, if the export was successful; False, if an error occurred: The path was not valid or occupied, there was not enought space in storage, the application wasn't able to create the map or there was no project selected.
        """
        pass
